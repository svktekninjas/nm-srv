name: Java CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production after build'
        required: false
        default: 'false'
      environment:
        description: 'Environment to use'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      # Build Configuration
      JAVA_VERSION: "17"
      MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
      MAVEN_GOALS: "clean verify"
      
      # Docker Configuration
      DOCKER_IMAGE_NAME: "naming-server-service"
      DOCKER_FILE_PATH: "./naming-server-service/Dockerfile"
      
      # Workflow Control
      ENABLE_SONAR_SCAN: "true"
      ENABLE_DEPENDENCY_CHECK: "true"
      ENABLE_DOCKER_SCAN: "true"
      FAIL_ON_VULNERABILITY: "true"
      
      # Versioning
      VERSION_STRATEGY: "git-sha"
      MAIN_BRANCH: "main"
      
      # AWS Configuration
      AWS_REGION: "us-east-1"
      
      # SonarQube Configuration - Default URL
      SONAR_HOST_URL: "https://sonarcloud.io"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarQube to get proper SCM history
    
    - name: Load Sonar Properties
      id: sonar-props
      run: |
        SONAR_PROPERTIES_FILE=".github/workflows/sonar-project.properties"
        if [ -f "$SONAR_PROPERTIES_FILE" ]; then
          echo "Loading Sonar properties from $SONAR_PROPERTIES_FILE"
          SONAR_PROJECT_KEY=$(grep "^sonar.projectKey=" "$SONAR_PROPERTIES_FILE" | cut -d'=' -f2)
          SONAR_ORGANIZATION=$(grep "^sonar.organization=" "$SONAR_PROPERTIES_FILE" | cut -d'=' -f2)
          echo "sonar_project_key=$SONAR_PROJECT_KEY" >> $GITHUB_OUTPUT
          echo "sonar_organization=$SONAR_ORGANIZATION" >> $GITHUB_OUTPUT
        else
          echo "Sonar properties file not found, using default values"
          echo "sonar_project_key=svktekninjas_nm-srv" >> $GITHUB_OUTPUT
          echo "sonar_organization=svktek" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build with Maven
      run: |
        cd naming-server-service
        mvn ${{ env.MAVEN_CLI_OPTS }} ${{ env.MAVEN_GOALS }}
    
    - name: Run SonarQube Analysis
      if: ${{ env.ENABLE_SONAR_SCAN == 'true' }}
      run: |
        cd naming-server-service
        # Copy sonar-project.properties if it exists in the .github/workflows directory
        if [ -f "../.github/workflows/sonar-project.properties" ]; then
          cp ../.github/workflows/sonar-project.properties .
        fi
        # Run sonar with properties file
        mvn sonar:sonar \
          -Dsonar.projectKey="${{ steps.sonar-props.outputs.sonar_project_key }}" \
          -Dsonar.organization="${{ steps.sonar-props.outputs.sonar_organization }}" \
          -Dsonar.host.url="${{ env.SONAR_HOST_URL }}" \
          -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run OWASP Dependency Check
      id: dependency-check
      if: ${{ env.ENABLE_DEPENDENCY_CHECK == 'true' }}
      run: |
        cd naming-server-service
        echo "Running OWASP Dependency Check with suppression file..."
        
        # Always generate the reports even if check fails
        mvn org.owasp:dependency-check-maven:check -Dfailbuild=false
        
        # Store the exit code to determine if vulnerabilities were found
        HAS_VULNERABILITIES=$?
        
        # Create summary information for the pipeline
        echo "OWASP Dependency Check completed"
        if [ $HAS_VULNERABILITIES -eq 0 ]; then
          echo "No critical vulnerabilities found or all are suppressed"
        else
          echo "Vulnerabilities found - see report for details"
          echo "::warning::OWASP Dependency Check found vulnerabilities. See artifact report for details."
        fi
        
        # If FAIL_ON_VULNERABILITY is true, re-run with failures enabled
        if [ "${{ env.FAIL_ON_VULNERABILITY }}" == "true" ]; then
          echo "Checking for critical vulnerabilities that would fail the build..."
          mvn org.owasp:dependency-check-maven:check
        fi
      continue-on-error: ${{ env.FAIL_ON_VULNERABILITY != 'true' }}
    
    - name: Upload Test and Analysis Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          naming-server-service/target/surefire-reports
          naming-server-service/target/dependency-check-report.html

    - name: Archive JAR file
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: naming-server-service/target/*.jar

  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      # Docker Configuration
      DOCKER_IMAGE_NAME: "naming-server-service"
      DOCKER_FILE_PATH: "./naming-server-service/Dockerfile"
      
      # Workflow Control
      ENABLE_DOCKER_SCAN: "true"
      FAIL_ON_VULNERABILITY: "true"
      
      # Versioning
      VERSION_STRATEGY: "git-sha"
      
      # AWS Configuration
      AWS_REGION: "us-east-1"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: naming-server-service/target/
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker Image Tag
        id: docker-tag
        run: |
          # Generate tag based on git SHA or 'latest'
          if [[ "${{ env.VERSION_STRATEGY }}" == "git-sha" ]]; then
            SHORT_SHA=$(git rev-parse --short HEAD)
            # Set output for this step
            echo "tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
            # Set env var for subsequent steps
            echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi
          
      - name: Set Full Image Name
        run: |
          # Use the tag output from previous step
          echo "FULL_IMAGE_NAME=${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.docker-tag.outputs.tag }}" >> $GITHUB_ENV
          echo "Will build image: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.docker-tag.outputs.tag }}"
          
      - name: Build Docker Image for ECR
        run: |
          # Change to naming-server-service directory to match context with Dockerfile
          cd naming-server-service
          
          # List contents of target directory to verify JAR file exists
          echo "Contents of target directory:"
          ls -la target/
          
          # Build from the naming-server-service directory
          docker build -t "${{ env.FULL_IMAGE_NAME }}" -f "Dockerfile" .
          
          # Show built images
          docker images
          
      - name: Run Trivy Scan on Docker Image
        if: ${{ env.ENABLE_DOCKER_SCAN == 'true' }}
        uses: aquasecurity/trivy-action@0.17.0
        with:
          image-ref: ${{ env.FULL_IMAGE_NAME }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: ${{ env.FAIL_ON_VULNERABILITY == 'true' && '1' || '0' }}
          vuln-type: 'os,library'
          scanners: 'vuln'
        # Continue even if vulnerabilities are found
        continue-on-error: true

      - name: Push the Docker Image
        run: |
          docker push "${{ env.FULL_IMAGE_NAME }}"
          
      - name: Generate Image Info
        if: success()
        run: |
          echo "image=${{ env.FULL_IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          
      - name: Send Notification on Success
        if: success()
        run: |
          echo "Successfully built and pushed image ${{ env.FULL_IMAGE_NAME }}"
          # Add notification mechanism here if needed (e.g., Slack, email)